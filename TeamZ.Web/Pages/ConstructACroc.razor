@inject TeamZ.Web.APIService apiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@using TeamZ.Web.FormModels
@page "/constructacroc"

<h3>Construct-a-Croc</h3>
<h4>Make Your own Croc!</h4>

<EditForm Model="@crocModel" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <p>
        <label>
            Choose your Crocodile's Color!
            <InputText id="color" @bind-Value="crocModel.Color" />
        </label>
    </p>
    <p>
        <label>
            What does your Crocodile like to do?
            <InputText id="color" @bind-Value="crocModel.Hobby" />
        </label>
    </p>
    
    <p>
        <label>
            What kind of hat does your Crocodile where? (Leave this blank if they have no hat!)
            <InputText id="color" @bind-Value="crocModel.Hat" />
        </label>
    </p>
    <p>
        <label>
            What color is your Crocodile's tail? (Leave this blank and it will match the Croc's color!)
            <InputText id="color" @bind-Value="crocModel.Tail" />
        </label>
    </p>
    <p>
        <label>
            What is your Crocodile holding? (Leave this blank if they aren't holding anything!)
            <InputText id="color" @bind-Value="crocModel.HeldItem" />
        </label>
    </p>
    
    <button type="submit">Construct My Croc</button>
</EditForm>



@code {
    private CrocModel crocModel = new CrocModel();


    private async void Submit()
    {
        if(await JSRuntime.InvokeAsync<bool>("confirm", "Are you ready to complete your Croc?"))
        {
            await apiService.PostConstructACrocAsync(crocModel.Color, crocModel.Hobby, crocModel.Hat, crocModel.Tail, crocModel.HeldItem);
            NavManager.NavigateTo("/");
        }
    }
}
