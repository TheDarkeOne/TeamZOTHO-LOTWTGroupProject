@inject TeamZ.Web.APIService apiService
@inject NavigationManager NavManager
@inject SessionService session
@implements IDisposable
@using TeamZ.Web.FormModels
@page "/login"

<div class="card">
    <h1 class="card-header">Login</h1>
    <div class="card-body">
        @if (session.LoggedInUser is null)
        {
            <EditForm Model="@loginModel" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <label>
                    Username:
                </label>
                <p>
                    <InputText id="username" @bind-Value="loginModel.Username" />
                </p>
                <label>
                    Password:
                </label>
                <p>
                    <InputText type="password" id="password" @bind-Value="loginModel.Password" />
                </p>
                <button type="submit">Login</button>
            </EditForm>
            @if (!loginSuccess)
            {
                <p style="color: red">Unable to Authenticate</p>
            }
        }
        else
        {
            <p>You are already logged in as @session.LoggedInUser</p>
            <p>You have been logged in for @session.CheckTimeLoggedOn() minutes</p>
        }
    </div>
    
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private bool loginSuccess = true;

    protected override void OnInitialized()
    {
        session.OnChange += StateHasChanged;
    }

    private async void Submit()
    {
        try
        {
            string sessionKey;
            (loginSuccess, sessionKey) = await apiService.PostLoginAsync(loginModel.Username, loginModel.Password);
            if (loginSuccess)
            {
                bool admin = await apiService.PostCheckAdminStatus(loginModel.Username, sessionKey);
                session.LoginUser(loginModel.Username, sessionKey, admin);
                NavManager.NavigateTo("/");
            }
        }
        catch (Exception e)
        {
            loginSuccess = false;
            Console.WriteLine("Error:", e);
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        session.OnChange -= StateHasChanged;
    }
}
